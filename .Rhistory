scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
gsub("GAL2023_", "", se_hf$ID)
gsub("gal2023_", "", tolower(se_hf$ID))
gsub("gal2023_0", "", tolower(se_hf$ID))
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), vjust = -0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), vjust = -0.5, hjust = 0)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), hjust = 0)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), hjust = 0, nudge_x = 0.1)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), hjust = 0, nudge_x = 0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
se_hd <- dat_HD %>%
filter(suckled_ever==T)
p1 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), hjust = 0, nudge_x = 0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1
p1 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hd$ID))), hjust = 0, nudge_x = 0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hd$ID))), hjust = 0, nudge_x = 0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hd$ID))), hjust = 0, nudge_x = 0.1)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1
p1 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hd$ID))), hjust = 0.5, vjust = 0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1
p1 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hd$ID))), hjust = 0.5, vjust = 0.5, size = 0.5)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1
p1 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HD, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HD, aes(x = Length, y = Ratio, fill = P_fem), size =3,shape = 21, alpha = 0.7) +
geom_point(data = se_hd, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hd, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hd$ID))), hjust = 0.5, vjust = 0.5, size = 2)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
theme_classic()+
theme(legend.position = "null")+
xlab("Length (m)") + ylab("Ratio (HD)")
p1
ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), hjust = 0.5, vjust = 0.5, size = 2)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
p2 <- ggplot() +
# Use color for curve lines (discrete)
geom_line(data = curve_df_HF, aes(x = Length, y = Ratio, color = Curve), linewidth=1) +
# Use fill or color gradient for points
geom_point(data = dat_HF, aes(x = Length, y = Ratio, fill = P_fem), size =3, shape = 21, alpha = 0.7) +
geom_point(data = se_hf, aes(x = Length, y = Ratio, fill = P_fem), shape = 22, size = 4)+
geom_text(data = se_hf, aes(x = Length, y = Ratio,
label = gsub("gal2023_0", "", tolower(se_hf$ID))), hjust = 0.5, vjust = 0.5, size = 2)+
scale_color_manual(values =c("darkcyan", "darkorange")) +
scale_fill_gradientn(colors= c("darkorange","darkcyan")) +
labs(fill = "P(F)", colour = "")+
xlab("Length (m)") + ylab("Ratio (HF)")+
theme_classic()
combined_plot <- p1 + p2
ggsave("Figures/modelled_curves_hf_hd_raw.png",
combined_plot, width = 13, height = 6)
combined_plot <- p1 + p2
combined_plot
combined_plot <- p1 + p2
ggsave("Figures/modelled_curves_hf_hd_raw.png",
combined_plot, width = 13, height = 6)
# Growth Curve Parameter Optimization
# Load necessary libraries and functions
source("Scripts/functions.R")
set.seed(1234567)
# 1. Load cleaned data ----
#mean metrics per individual:
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
#nishiwaki parameters from tip of snout to center of eye
nish <- read.csv("Data/nishiwaki_parameters.csv", header = T)
# 2. Subset datasets ----
# head to dorsal fin:
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
Ratio = mean_ratio.HD, R_sd = sd_ratio.HD,
suckled_ever, suckling_ever, n_photos) %>%
filter(n_photos > 2 & !is.na(R_sd))
dim(dat_HD)
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
Ratio = mean_ratio.HF, R_sd = sd_ratio.HF,
suckled_ever, suckling_ever, n_photos) %>%
filter(n_photos > 2 & !is.na(R_sd))
dim(dat_HF)
#growth curves
hd_mod <-optim_sex(data = dat_HD,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
hd_params <- hd_mod$params
#posterior probabilities
dat_HD$P_fem<-f_probs(params = hd_params, data = dat_HD)
#growth curves
hf_mod <-optim_sex(data = dat_HF,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
hf_params <- hf_mod$params
#posterior probabilities
dat_HF$P_fem<-f_probs(params = hf_params, data = dat_HF)
# 4. Bootstraps ------
library(boot)
#~~~~a. known error parameter for DJI Mini drone----
err_mean <- 0.0012 #observed error distribution
err_sd <- 0.0315
?rnorm
#~~~~b. setup the hybrid bootstrap function ----
foo <- function(data,indices){
#non-parametric bit: inter-image variability
dt <- data[indices,]
#parametric bit: altitude estimation induced error
dt$Length <- dt$Length + rnorm(nrow(dt), mean = err_mean, sd = err_sd)
#fit the model with bootstrap simmulation:
mod <-optim_sex(data = dt,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
params <- mod$params
#estimate individual post probs:
P_fem<-f_probs(params = params, data = dt)
#output
c(
params,
P_fem
)
}
#~~~~c. run bootstrap estimates for HD----
my_boot <- boot(
data = dat_HD,
statistic = foo,
R = 100
)
View(my_boot)
my_boot$t0
hd_params
my_boot$t0[-seq(1,4)]
plot(dat_HD$P_fem, my_boot$t0[-seq(1,4)])
my_boot$t
dim(my_boot$t)
my_boot$t[,seq(1,4)]
boot_params<- my_boot$t[,seq(1,4)]
boot_params
colMeans(boot_params)
hd_params
boot.ci(my_boot)
boot.ci(my_boot, index = 2)
boot.ci(my_boot, index = 3)
boot.ci(my_boot, index = 4)
plot.boot(my_boot)
plot(my_boot)
plot(my_boot)
boot.ci(myBoot, index = 1)#basic ci.
plot(my_boot,index = 2)
plot(my_boot,index = 3)
plot(my_boot,index = 4)
plot(my_boot,index = 5)
plot(my_boot,index = 6)
plot(my_boot,index = 7)
plot(my_boot,index = 8)
plot(my_boot,index = 9)
plot(my_boot,index = 10)
#~~~~c. run bootstrap estimates for HD----
my_boot_HD <- boot(
data = dat_HD,
statistic = foo,
R = 100
)
hd_params
plot(dat_HD$P_fem, my_boot$t0[-seq(1,4)])
plot(dat_HD$P_fem, my_boot_HD$t0[-seq(1,4)])
plot(dat_HD$P_fem, my_boot_HD$t0[-seq(1,4)])
boot_params<- my_boot_HD$t[,seq(1,4)]
colMeans(my_boot_HD)
my_boot_HD
colMeans(boot_params)
boot.ci(boot_params, index = 4)
boot.ci(my_boot_HD, index = 4)
plot(my_boot_HD,index = 10)
#~~~~c. run bootstrap estimates for HD----
my_boot_HF <- boot(
data = dat_HF,
statistic = foo,
R = 100
)
hf_params
plot(dat_HF$P_fem, my_boot_HF$t0[-seq(1,4)])
boot_params_hf<- my_boot_HF$t[,seq(1,4)]
colMeans(boot_params_hf)
hf_params
boot.ci(my_boot_HF, index = 4)
boot.ci(my_boot_HF, index = 1)
plot(my_boot_HF,index = 10)
plot(my_boot_HF,index = 2)
plot(my_boot_HF,index = 1)
plot(my_boot_HF,index = 2)
plot(my_boot_HF,index = 4)
plot(my_boot_HF,index = 5)
plot(my_boot_HF,index = 6)
plot(my_boot_HF,index = 7)
#~~~~c. run bootstrap estimates for HD----
my_boot_HF <- boot(
data = dat_HF,
statistic = foo,
R = 1000
)
hf_params
plot(dat_HF$P_fem, my_boot_HF$t0[-seq(1,4)])
boot_params_hf<- my_boot_HF$t[,seq(1,4)]
colMeans(boot_params_hf)
boot.ci(my_boot_HF, index = 1)
plot(my_boot_HF,index = 7)
boot.ci(my_boot_HF, index = 7)
plot(my_boot_HF,index = 7)
mean(my_boot_HF[,7])
mean(my_boot_HF$t[,7])
dat_HF$P_fem[3]
hist(dat_HF$P_fem)
hist(dat_HF$P_fem, breaks = 20)
head(my_boot_HF$t)
dat_HF$P_fem[3]
plot(dat_HF$P_fem, my_boot_HF$t0[-seq(1,4)])
my_boot_HF$t0
#~~~~b. setup the hybrid bootstrap function ----
foo <- function(data,indices){
#non-parametric bit: inter-image variability
dt <- data[indices,]
#parametric bit: altitude estimation induced error
dt$Length <- dt$Length + rnorm(nrow(dt), mean = err_mean, sd = err_sd)
#fit the model with bootstrap simulation:
mod <-optim_sex(data = dt,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
params <- mod$params
#estimate individual post probs:
P_fem<-f_probs(params = params, data = dt)
#output
c(
P_fem
)
}
#~~~~c. run bootstrap estimates for HD----
my_boot_HD <- boot(
data = dat_HD,
statistic = foo,
R = 100
)
plot(dat_HD$P_fem, my_boot_HD$t0)
colMeans(boot_params)
boot.ci(my_boot_HD, index = 4)
plot(my_boot_HD,index = 1)
#~~~~c. run bootstrap estimates for HD----
my_boot_HF <- boot(
data = dat_HF,
statistic = foo,
R = 1000
)
colMeans(my_boot_HF$t)
plot(my_boot_HF, index = 1)
plot(my_boot_HF, index = 2)
plot(my_boot_HF, index = 3)
plot(my_boot_HF, index = 4)
dat_HF
#~~~~b. setup the hybrid bootstrap function ----
foo <- function(data,indices){
#non-parametric bit: inter-image variability
dt <- data[indices,]
#parametric bit: altitude estimation induced error
dt$Length <- dt$Length + rnorm(nrow(dt), mean = err_mean, sd = err_sd)
#fit the model with bootstrap simulation:
mod <-optim_sex(data = dt,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
params <- mod$params
#estimate individual post probs:
f_probs(params = params, data = dt)
}
#~~~~c. run bootstrap estimates for HD----
my_boot_HD <- boot(
data = dat_HD,
statistic = foo,
R = 10
)
View(my_boot_HD$t0)
my_boot_HD$t0
#~~~~c. run bootstrap estimates for HD----
my_boot_HF <- boot(
data = dat_HF,
statistic = foo,
R = 10
)
boot_probs <- my_boot_HF$t
boot_probs
my_boot$sim
my_boot$data
#~~~~b. setup the hybrid bootstrap function ----
foo <- function(data,indices){
#non-parametric bit: inter-image variability
dt <- data[indices,]
#parametric bit: altitude estimation induced error
#dt$Length <- dt$Length + rnorm(nrow(dt), mean = err_mean, sd = err_sd)
#fit the model with bootstrap simulation:
mod <-optim_sex(data = dt,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
params <- mod$params
#estimate individual post probs:
f_probs(params = params, data = dt)
}
#~~~~c. run bootstrap estimates for HD----
my_boot_HD <- boot(
data = dat_HD,
statistic = foo,
R = 10
)
hd_params
plot(dat_HD$P_fem, my_boot_HD$t0)
colMeans(boot_params)
#~~~~b. setup the hybrid bootstrap function ----
foo <- function(data,indices){
#non-parametric bit: inter-image variability
dt <- data[indices,]
#parametric bit: altitude estimation induced error
#dt$Length <- dt$Length + rnorm(nrow(dt), mean = err_mean, sd = err_sd)
#fit the model with bootstrap simulation:
mod <-optim_sex(data = dt,
pard0 = c(fr = nish[3,2], fmax = nish[1,2], mr = nish[4,2], mmax = nish[2,2]),
chm = 6)
params <- mod$params
#estimate individual post probs:
f_probs(params = params, data = dt)
}
#~~~~c. run bootstrap estimates for HD----
my_boot_HD <- boot(
data = dat_HD,
statistic = foo,
R = 10
)
my_boot_HD$t0
colMeans(my_boot_params)
boot.ci(my_boot_HD, index = 4)
boot.ci(my_boot_HD, index = 4)
plot(my_boot_HD,index = 1)
#~~~~c. run bootstrap estimates for HD----
my_boot_HD <- boot(
data = dat_HD,
statistic = foo,
R = 100
)
hd_params
plot(dat_HD$P_fem, my_boot_HD$t0)
boot.ci(my_boot_HD, index = 4)
plot(my_boot_HD,index = 1)
prob_boot <- my_boot_HD$t
prob_boot
colMeans(prob_boot)
hist(colMeans(prob_boot)()
hist(colMeans(prob_boot))
hist(colMeans(prob_boot))
hist(dat_HD$P_fem)
mean(prob_boot[,1])
hist(prob_boot[,1])
hist(prob_boot[,2])
hist(prob_boot[,3])
hist(prob_boot[,4])
mode(prob_boot[,4])
median(prob_boot[,4])
median(prob_boot[,1])
install.packages("HDInterval")
library(HDInterval)
hdi(prob_boot[,1], credMass = 0.95)
