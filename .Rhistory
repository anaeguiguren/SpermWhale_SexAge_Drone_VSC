ggplot(final_results, aes(x = factor(uncertainty), y = accuracy)) +
geom_boxplot()+
geom_hline(yintercept = 0.80, linetype = "dashed", color = "red")+
scale_y_continuous(limits = c(0,1))
ggplot(final_results, aes(x = factor(uncertainty), y = true_pos)) +
geom_hline(yintercept = 0.80, linetype = "dashed", color = "red")+
geom_boxplot()
ggplot(final_results, aes(x = factor(uncertainty), y = true_pos)) +
geom_hline(yintercept = 0.80, linetype = "dashed", color = "red")+
geom_boxplot()+
scale_y_continuous(limits = c(0,1))
ggplot(final_results, aes(x = factor(uncertainty), y = true_pos)) +
geom_boxplot()+
geom_hline(yintercept = 0.80, linetype = "dashed", color = "red")+
scale_y_continuous(limits = c(0,1))
ggplot(final_results, aes(x = factor(uncertainty), y = true_pos)) +
geom_boxplot()+
geom_hline(yintercept = 0.90, linetype = "dashed", color = "red")+
scale_y_continuous(limits = c(0,1))
?optim
#~~~a. Define female and male curve shapes ----
fem_curve <- function(length, fr, fmax) {
fmax * exp(fr * length) / (1 + exp(fr * length))
}
mal_curve <- function(length, fr, fmax, mr, mmax, chm){
base <- fmax * exp(fr  * length) / (1 + exp(fr * length))
offset <- (length > chm) * mmax *
(exp(mr * length) / (1 + exp(mr * length)) -
exp(mr * chm) / (1 + exp(mr * chm)))
Ratio <- base + offset
return(Ratio)
}
sumsq <- function(params, data, chm, weighted = FALSE){
fr <- params[1]
fmax <- params[2]
mr <- params[3]
mmax <- params[4]
preds_f <- fem_curve(data$Length, fr, fmax)
preds_m <- mal_curve(data$Length, fr, fmax, mr, mmax, chm)
resid_f <- (data$Ratio - preds_f)^2 #female sum of squares
resid_m <- (data$Ratio - preds_m)^2 # male sum of squares
residuals <- pmin(resid_f, resid_m) #returns the minimum of each curve for each data point
#when weighted by SD:
if(weighted){
ss <- sum(residuals/data$SD_Ratio) #sum of squares divided by sd
return(ss)
}else{
likes <- cbind(resid_f, resid_m)
ss <- sum(residuals)
return(list(ss = ss, likes = likes))
}
}
#~~~c. Fit parameters using optim ----
optim_sex <- function(data, chm, pard0, weighted = FALSE){
objfun <- function(p){ #this is the thing we want to minimize (optimize)
if(weighted) {
sumsq(p, data, chm, TRUE)
}else{
sumsq(p, data, chm, FALSE)$ss
}
}
fit <- optim(pard0, objfun, method = "Nelder-Mead" )
params <- fit$par
ss <- fit$value
cat(ifelse(weighted, "Weighted SS", "Unweighted SS"), "\n")
cat(sprintf("Sum of squares: %6.4f\n", ss)) #what are these percentages about?
cat(sprintf("Fitted parameters: fr = %5.2f, fmax = %5.2f, mr = %5.2f, mmax = %5.2f\n",
params[1], params[2], params[3], params[4]))
list(params = params, ss = ss, fit = fit)
}
f_probs <- function(params, data, chm = 6, weighted = FALSE) {
res <- sumsq(params, data, chm)
likes <- exp(-res$likes / (2 * res$ss / (nrow(res$likes) - 1)))
post_probs <- likes[, 1] / rowSums(likes)
return(post_probs)
}
source("Scripts/functions.R")
set.seed(1991)
# 1. generate ratios (R) for male and females to match Nishiwaki-----
params.true <- read.csv("Data/nishiwaki_parameters.csv")
n <- 30 # number of whales of each sex
min.L <- 4 # length at birth
max.L.F <- 11 # max length females
mean.L.F <- 8 # guestimated mean length of females
# simmulate female lengths - truncated normal distribution
x_F <- rnorm(n, mean = mean.L.F, sd = (max.L.F - mean.L.F) / 3) %>%
# Truncate values to be between min and max length
pmax(min.L) %>%
pmin(max.L.F)
# Verify the distribution
hist(x_F, breaks = 10, main = "Distribution of Female Lengths",
xlab = "Length (m)")
fmax <- params.true$Value[1]
print(fmax) #maximum ntb ratio
fr <- params.true$Value[3]
print(fr) #initial growth rate (same for males and females)
y_F <-  fmax * exp(fr * x_F) / (1 + exp(fr * x_F)) +
rnorm(n, mean = 0, sd = 0.005) #add noise
# simulate male lengths
mean.L.M <- 12
max.L.M <- 17
#uniform distribution of males, young adults should leave
x_M <- runif(n, min = min.L, max = max.L.M)
hist(x_M)
# simulate male ratios in a piecewise manner
mmax <- params.true$Value[2] #maximum ntb ratio
mr <- params.true$Value[4] # male growth rate post 6 m
chm <- 6 # size at which growth rate changes
base <- fmax * exp(fr * x_M) / (1 + exp(fr * x_M))
offset <- (x_M > chm) * mmax * (
exp(mr * x_M) / (1 + exp(mr * x_M)) -
exp(mr * chm) / (1 + exp(mr * chm))
)
noise <- rnorm(n, mean = 0, sd = 0.005)
y_M <- base + offset + noise
# 2. visualize simulated data----
df <- data.frame(Length = c(x_F, x_M),
Ratio = c(y_F, y_M),
Sex = rep(c("F", "M"), each = 30))
# Create a sequence of lengths for the female lines
f_line <- data.frame(
Length = seq(min.L, max.L.F, by = 0.2)
)
f_line <- f_line %>%
mutate(Ratio = fem_curve(Length, fr, fmax))
m_line <- data.frame(
Length = seq(min.L, max.L.M, by = 0.2)
)
m_line <- m_line %>%
mutate(Ratio = mal_curve(Length, fr, fmax, mr, mmax, chm = 6))
# visualize points
fem_col <- "darkcyan"
mal_col <- "darkorange"
ggplot(df, aes(x = Length, y = Ratio, colour = Sex)) +
geom_point(alpha = 0.6) +
geom_line(data = f_line, aes(x = Length, y = Ratio),
inherit.aes = FALSE, colour = fem_col) +
geom_line(data = m_line, aes(x = Length, y = Ratio),
inherit.aes = FALSE, colour = mal_col,) +
scale_color_manual(values = c("F" = fem_col, "M" = mal_col)) +
labs(title = "Simulated Growth Curves with Curves with known
parameters from Nishiwaki 1963",
x = "Total Length (m)",
y = "Nose-to-Body Ratio") +
theme_classic()
data = df
chm = 6
pard0 = c(fr = 0.5, fmax = 0.5, mr = 0.5, mmax = 0.5)
weighted = F
fit_result <- optim_sex(data = df, chm = 6,
pard0 = c(fr = 0.5, fmax = 0.5, mr = 0.5, mmax = 0.5),
weighted = F)
#extract estimated parameters:
params.est <- fit_result$params
fit_result
objfun <- function(p){ #this is the thing we want to minimize (optimize)
if(weighted) {
sumsq(p, data, chm, TRUE)
}else{
sumsq(p, data, chm, FALSE)$ss
}
}
fit <- optim(pard0, objfun, method = "Nelder-Mead" )
fit
?optim
fit <- optim(pard0, objfun, method = "BGFS" )
fit <- optim(pard0, objfun, method = "BFGS" )
fit
fit <- optim(pard0, objfun, method = "CG" , maxit = 2000)
fit <- optim(pard0, objfun, method = "CG" , control= list(maxit = 500))
fit
fit <- optim(pard0, objfun, method = "CG" , control= list(maxit = 20000))
fit
fit <- optim(pard0, objfun, method = "BFGS" , control= list(maxit = 20000))
fit
fit <- optim(pard0, objfun,control= list(maxit = 20000))
fit
params
fit <- optim(pard0, objfun, control= list(maxit = 205000))
params <- fit$par
params
ss <- fit$value
ss
fr <- params[1]
fmax <- params[2]
mr <- params[3]
mmax <- params[4]
preds_f <- fem_curve(data$Length, fr, fmax)
preds_m <- mal_curve(data$Length, fr, fmax, mr, mmax, chm)
resid_f <- (data$Ratio - preds_f)^2 #female sum of squares
resid_m <- (data$Ratio - preds_m)^2 # male sum of squares
residuals <- pmin(resid_f, resid_m) #returns the minimum of each curve for each data point
residuals
likes <- cbind(resid_f, resid_m)
ss <- sum(residuals)
likes
ss <- sum(residuals)
ss
res <- sumsq(params, data, chm)
res
res$likes
likes <- exp(-res$likes / (2 * res$ss / (nrow(res$likes) - 1)))
likes
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
unlink("~/trying_cache", recursive = TRUE)
rowSums(likes)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
source("Scripts/00_DJI_Mini_Callibration_Data_Prep.R")
library(ggplot2)
px.length <- function(l.m, p.d, f.l = 4.25531, a.m){
(l.m/p.d)*(f.l/a.m)
}
#calculate pixel length:
dat$pixel.length <- px.length(l.m=dat$length,
p.d = dat$pixelDimension.old,
a.m = dat$altitude)
dat<- dat %>% select(Date, FlightNo, imageName, timeStamp, altitudeRaw = altitude, imageWidth = ImageWidth, pixel.length, position = pos, nadir = nadir)
dat<- dat[-which(dat$nadir==F),]
#recalculate Balaena's length in m, with new altitude
boat.height = 1.03- 0.24# balaena's altitude over the water - toe rail
launch.chest = 1.4 # Mateo's chest height
camera.height = 0.045 # cameras distance above the base of the drone's legsfrom legs
dat$altitude.fix <- dat$altitude + launch.chest + camera.height
head(dat)
morpho.length.alpha <- function(image.width, altitude, length.pixels){
alpha = ifelse(image.width == 3840, yes = 0.000328, no =
ifelse(image.width == 1920, yes = 0.000656, no = NA))
length = alpha * altitude * length.pixels
return(length)
}
dat$bal.length<- morpho.length.alpha(altitude = dat$altitude.fix,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
summary(dat$bal.length)
hist(dat$bal.length, breaks = 20, xlab = "estimated length of Balaena (m)", main = "")
abline(v = 12.03, col = 2, lwd = 2)
true.altitude <- function(true.length, pixel.length, image.width){
alpha = ifelse(image.width == 3840, yes = 0.000328, no =
ifelse(image.width == 1920, yes = 0.000656, no = NA))
t.a = (true.length/(pixel.length* alpha))
return(t.a)
}
dat$true.altitude <- true.altitude(true.length = 12.03,
pixel.length = dat$pixel.length,
image.width = dat$imageWidth)
dat$altitude.err <- dat$true.altitude - dat$altitude.fix
dat$altitude.err.p <- (dat$altitude.err/dat$true.altitude)
hist(dat$altitude.err, breaks = 30, xlab = "altitude error (m)",
main = "")
text(x = 10, y = 40, paste("mean error = ",signif(mean(dat$altitude.err), digits =3)))
text(x = 10, y = 35, paste("s.d. = ",signif(sd(dat$altitude.err), digits =3)))
ggplot(dat, aes(x = altitude.fix, y = true.altitude))+
geom_point(alpha = 0.5)+
theme(legend.position = "none")+
geom_smooth(method = "lm")
# model random intercept :
library(nlme)
# should it be hierarchical?
m.int <- gls(true.altitude ~ altitude.fix, data = dat, method = "ML")
summary(m.int) #AIC = 1405.26/ BIC = 1416.77
intervals(m.int, level = 0.9)
# model random intercept :
m.rand <- lme(true.altitude ~ altitude.fix, data = dat, method = "ML",
random = ~1|Date)#
summary(m.rand) # AIC = 1389.933 BIC = 1405.284	- probably yes?
intervals(m.rand, level = 0.9)
# add altitude:
m.rand.alt <- lme(altitude.err ~ true.altitude, data = dat, method = "ML",
random = ~1|Date)
anova(m.rand, m.int)# does help!
summary(m.rand.alt)# 1182.965
intervals(m.rand.alt, level = 0.9)
# should it be hierarchical?
m.int <- gls(true.altitude ~ altitude.fix, data = dat, method = "ML")
m.int
intervals(m.int, level = 0.95)
ggplot(dat, aes(x = true.altitude, y = altitude.err.p))+
geom_point(alpha = 0.5)+
theme(legend.position = "none")+
geom_smooth(method = "lm")
mean(dat$altitude.err.p)
quantile(dat$altitude.err.p, probs = c(0.05, 0.95))
dat$altitude.corr <-1.40 + dat$altitude.fix*1.017
dat$bal.length.c<- morpho.length.alpha(altitude =dat$altitude.corr,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
quantile(dat$bal.length.c, probs = c(0.05, 0.5, 0.95))
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
text(x = 10, y = 40, paste("mean = ",signif(mean(dat$bal.length.c), digits =3)))
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
text(x = 10, y = 40, paste("mean = ",signif(mean(dat$bal.length.c), digits =3)))
text(x = 10, y = 35, paste("s.d. = ",signif(sd(dat$altitude.err), digits =3)))
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
text(x = 13, y = 40, paste("mean = ",signif(mean(dat$bal.length.c), digits =3)))
text(x = 13, y = 35, paste("s.d. = ",signif(sd(dat$altitude.err), digits =3)))
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
text(x = 13, y = 40, paste("mean = ",(mean(dat$bal.length.c), digits =3)))
text(x = 13, y = 35, paste("s.d. = ",signif(sd(dat$altitude.err), digits =3)))
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
text(x = 13, y = 40, paste("mean = ",mean(dat$bal.length.c), digits =3)))
text(x = 13, y = 35, paste("s.d. = ",sd(dat$bal.length.c), digits =3)))
hist(dat$bal.length.c, breaks = 30, main = "", xlab = "estimated length")
abline(v = 12.03, col = 2, lwd = 2)
text(x = 13, y = 40, paste("mean = ",mean(dat$bal.length.c)))
text(x = 13, y = 35, paste("s.d. = ",sd(dat$bal.length.c)))
dat$length.error.c <- dat$bal.length.c - 12.03 # corrected error raw
dat$length.error.c.p <- (dat$length.error.c/dat$bal.length.c)*100
dat$length.error.p <- (dat$error/dat$bal.length)*100
dat$length.error.c <- dat$bal.length.c - 12.03 # corrected error raw
dat$length.error.c.p <- (dat$length.error.c/dat$bal.length.c)*100
dat$length.error.p <- (dat$error/dat$bal.length)*100
e <- c(dat$length.error.c.p,dat$length.error.p)
d <- data.frame(perc.error = e, error.type = rep(c("corrected", "uncorrected"), each = length(dat$bal.length)))
ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed")+
geom_hline(yintercept = 5, linetype = "dashed")
p1 <-ggplot(d, aes(x = error.type, y = perc.error))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "% error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed")+
geom_hline(yintercept = 5, linetype = "dashed")
getwd()
ggsave("Scripts/corrected_uncorrected_error.png", p1, witdh = 10, height 7)
ggsave("Scripts/corrected_uncorrected_error.png", p1, witdh = 10, height= 7)
p1 <-ggplot(d, aes(x = error.type, y = perc.error))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "% error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed")+
geom_hline(yintercept = 5, linetype = "dashed")
p1
quantile(dat$length.error.c.p, probs=c(0.05, 0.95))
dat$length.error.p
dat$length.error.p <- (dat$error/dat$bal.length)*100
dat$error <- dat$bal.length-12.03
mean(dat$error)
sd(dat$error)
dat$length.error.p <- (dat$error/dat$bal.length)*100
dat$bal.length
dat$bal.length
dat$length.error.p <- (dat$error/dat$bal.length)*100
e <- c(dat$length.error.c.p,dat$length.error.p)
d <- data.frame(perc.error = e, error.type = rep(c("corrected", "uncorrected"), each = length(dat$bal.length)))
```{r fig3, fig.width = 15, fig.width = 2, fig.align="center"}
dat
head(d)
ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()
ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))
ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed")+
geom_hline(yintercept = 5, linetype = "dashed")
ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")
library("wacolors")
p1 <-ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 10, height = 3)
getwd()
library(wacolors)
p1 <-ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 10, height = 3)
ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 5, height = 10)
p1 <-ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 5, height = 10)
library(wacolors)
p1 <-ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "% Error", x = "Estimation type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 3, height = 7)
getwd()
library(wacolors)
setwd( "C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
p1 <-ggplot(d, aes(x = error.type, y = perc.error, color = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")+
theme_classic()
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 10, height = 3)
library(wacolors)
setwd( "C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
p1 <-ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")+
theme_classic()
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 5, height = 5)
library(wacolors)
setwd( "C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
p1 <-ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-60,60), breaks = seq(-60,60,10))+
labs(y = "corrected % error", x = "error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 3, height = 3)
library(wacolors)
setwd( "C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
p1 <-ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-20,20))+
labs(y = "corrected % error", x = "error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 3, height = 3)
ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-20,20))+
labs(y = "corrected % error", x = "error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
