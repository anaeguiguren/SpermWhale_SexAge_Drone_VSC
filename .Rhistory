random = ~altitude.fix|Date)#
summary(m.rand) # AIC = 1389.933 BIC = 1405.284	- probably yes?
dat$fit.nh <- fitted(m.nh) #non-hierarchical
dat$fit.rand.int <- fitted(m.rand.int) #random intercepts
dat$fit.rand <- fitted(m.rand) # random slopes
#compare errors from three models
dat$length.corrected.nh<- morpho.length.alpha(altitude =dat$fit.nh,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
dat$length.corrected.rand.int<- morpho.length.alpha(altitude =dat$fit.rand.int,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
dat$length.corrected.rand<- morpho.length.alpha(altitude =dat$fit.rand,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
dat$length.corrected.0 <- dat$bal.length
dat_long <- dat %>%
pivot_longer(
cols = starts_with("length.corrected"),
names_to = "correction_type",
values_to = "corrected_altitude"
)%>%
mutate(error = corrected_altitude - 12.03,
error_p = 100*(error/12.03))
ggplot(dat_long, aes(x = error_p, fill = correction_type)) +
stat_halfeye(alpha = 0.5, adjust = 1) +
theme_classic() +
labs(
title = "Density plots of corrected altitudes",
x = "Error %",
y = "Density",
fill = "Correction Type"
)+
facet_wrap(~correction_type, ncol = 1)+
theme(legend.position = "None")+scale_fill_wa_d("rainier")
dat_long %>%
group_by(correction_type)%>%
summarise(mean_err = mean(error),
mean_err_p = mean(error_p),
quant_5 = quantile(error_p, probs = 0.025),
quant_95 = quantile(error_p, probs = 0.975),
ic_range = quant_95-quant_5)
dat_long %>%
group_by(correction_type)%>%
summarise(mean_err = mean(error),
mean_err_p = mean(error_p),
quant_5 = quantile(error_p, probs = 0.025),
quant_95 = quantile(error_p, probs = 0.975),
ic_range = quant_95-quant_5,
sd = sd(error_p))
sample(x = 1:10, size = 10)
sample(x = 1:10, size = 10, replace = T)
#bootstraping:
data(iris)
library(boot)
foo <- function(data, indices){
dt <- data[indices,]#subset data
c(
cor(dt[,1], dt[,2], method = "s"),
median(dt[,1]),
median(dt[,2])
)
}
foo <- function(data, indices, cor.type){
dt <- data[indices,]#subset data
c(
cor(dt[,1], dt[,2], method = cor.type),
median(dt[,1]),
median(dt[,2])
)
}
set.seed(1991)
?boot
myBoot <-boot(iris, foo, R = 1000, cor.type = 's')
myBoot
head(myBoot$t)
myBoot$t0
head(myBoot$t) #values obtained in each bootstrap
myBoot$t0 # observed values for full dataset
myBoot
colMeans(myBootstrap$t)-myBootstrap$t0
colMeans(myBoot$t)-myBootstrap$t0
colMeans(myBoot$t)-myBoot$t0
myBoot$t0 # observed values for full dataset
colMeans(myBoot$t)
plot(myBoot)
plot(myBoot, index = 2)
plot(myBoot, index = 3)
boot.ci(myBoot)
boot.ci(myBoot, index = 3)
dat$altitude.err
gls(true.altitude ~ altitude.fix,, data = dat, method = "ML")
gls(true.altitude ~ altitude.fix,, data = dat, method = "ML", quiet = T)
gls(true.altitude ~ altitude.fix,, data = dat, method = "ML", silent = T)
gls(true.altitude ~ altitude.fix,, data = dat, method = "ML", verbose = F)
m<-gls(true.altitude ~ altitude.fix,, data = dat, method = "ML", verbose = F)
coef(m)
coef(m)[1]
coef(m)[2]
unname(coef(m)[1])
foo <- function(data, indices){
dt <- data[indices,]#subset data
m<-gls(true.altitude ~ altitude.fix,, data = dat, method = "ML", verbose = F)
c(
unname(coef(m)[1]),
unname(coef(m)[2])
)
}
foo <- function(data, indices){
dt <- data[indices,]#subset data
m<-gls(true.altitude ~ altitude.fix,, data = dt, method = "ML", verbose = F)
c(
unname(coef(m)[1]),
unname(coef(m)[2])
)
}
myBoot <-boot(dat, foo, R = 1000)
myBoot$t0
colMeans(myBoot$t)
head(myBoot$t)
plot(myBoot, index = 1)
plot(myBoot, index = 2)
boot.ci(myBoot, index = 1)#basic ci.
boot.ci(myBoot, index = 2)#basic ci.
foo <- function(data, indices){
dt <- data[indices,]#subset data
m<-gls(true.altitude ~ altitude.fix,, data = dt, method = "ML", verbose = F)
c(
unname(coef(m)[1]),#intercept
unname(coef(m)[2])# slope
dt$true.altitude - dt$altitude.fix #error
c(
unname(coef(m)[1]),#intercept
unname(coef(m)[2]),# slope
dt$true.altitude - dt$altitude.fix #error
)
foo <- function(data, indices){
dt <- data[indices,]#subset data
m<-gls(true.altitude ~ altitude.fix,, data = dt, method = "ML", verbose = F)
c(
unname(coef(m)[1]),#intercept
unname(coef(m)[2]),# slope
dt$true.altitude - dt$altitude.fix #error
)
}
myBoot <-boot(dat, foo, R = 1000)
myBoot$t0
colMeans(myBoot$t)
c(
unname(coef(m)[1]),#intercept
unname(coef(m)[2]),# slope
range(dt$true.altitude - dt$altitude.fix) #error
)
foo <- function(data, indices){
dt <- data[indices,]#subset data
m<-gls(true.altitude ~ altitude.fix,, data = dt, method = "ML", verbose = F)
c(
unname(coef(m)[1]),#intercept
unname(coef(m)[2]),# slope
range(dt$true.altitude - dt$altitude.fix) #error
)
}
myBoot <-boot(dat, foo, R = 1000)
myBoot$t0
foo <- function(data, indices){
dt <- data[indices,]#subset data
m<-gls(true.altitude ~ altitude.fix,, data = dt, method = "ML", verbose = F)
c(
unname(coef(m)[1]),#intercept
unname(coef(m)[2]),# slope
sd(dt$true.altitude - dt$altitude.fix) #error
)
}
myBoot <-boot(dat, foo, R = 1000)
myBoot$t0
colMeans(myBoot$t)
id.mean <- id.morph %>%
group_by(ID) %>%
summarize(mean_TL = mean(TL.m, na.rm = T), cv_TL = (sd(TL.m, na.rm = T)/mean_TL)*100, sd_TL = sd(TL.m, na.rm = T),
mean_HD = mean(HD.m, na.rm = T), cv_HD = (sd(HD.m, na.rm = T)/mean_HD)*100, sd_HD = sd(HD.m, na.rm = T),
mean_HF = mean(HF.m, na.rm = T), cv_HF = (sd(HF.m, na.rm = T)/mean_HF)*100, sd_HF = sd(HD.m, na.rm = T),
mean_ratio.HD = mean(ratio.HD, na.rm = T), cv_ratio.HD = (sd(ratio.HD, na.rm = T)/mean_ratio.HD), sd_ratio.HD = sd(ratio.HD, na.rm = T),
mean_ratio.HF = mean(ratio.HF, na.rm = T), cv_ratio.HF = (sd(ratio.HF, na.rm = T)/mean_ratio.HF), sd_ratio.HF = sd(ratio.HF, na.rm = T),
n_photos = n(),
date = first(date),
mean_altitude= mean(altitude.c))
id.morph <- morpho.output%>%
filter(!is.na(ID))
# Load required packages
source("Scripts/functions.R")
library(tidyverse)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# get .mp4 file name
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# get correct altitude data from drone srt files
morpho.output <- getSrtAltitude(morpho.output)
# get and ration length estimates
morpho.output<- morpho.output %>% mutate(
altitude.c = altitudeASL(altitude.raw = droneAltitude), #add launch height to barometer altitude:
TL.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = TL.px), #estimate length in meters
HD.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HD.px), #estimate length in meters
HF.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HF.px),
ratio.HD = HD.px/TL.px, # ratio using nose-dorsal fin measure
ratio.HF = HF.px/TL.px, # ratio using nose- flipper measure
ratio.DF = HF.px/HD.px # ratio nose-flipper to nose DF
)
# add quality ratings:
# get q. ratings
q.ratings <- read.csv("Data/Processed_Data/morpho.output.QRating.csv", header = T)
q.ratings <- q.ratings %>% mutate(imageName = file_name)
morpho.output <- morpho.output %>%
mutate(ind = as.character(ind)) %>%
left_join(q.ratings %>% mutate(ind = as.character(ind)) %>%
select(imageName, ind, Q.focus, Q.straightness, Q.roll, Q.arch, Q.pitch, Q.meas, Q.dorsal, Q.flippers ),
by = c("imageName", "ind") )
morpho.output<- morpho.output[-which(is.na(morpho.output$Q.focus & morpho.output$notes == "balaena")),]
morpho.output <- morpho.output %>% filter(notes != "balaena")
photo.id <- read.csv("Data/Photo_ID_all.csv", header = T)
# Load required packages
source("Scripts/functions.R")
library(tidyverse)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# get .mp4 file name
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# get correct altitude data from drone srt files
morpho.output <- getSrtAltitude(morpho.output)
# get and ration length estimates
morpho.output<- morpho.output %>% mutate(
altitude.c = altitudeASL(altitude.raw = droneAltitude), #add launch height to barometer altitude:
TL.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = TL.px), #estimate length in meters
HD.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HD.px), #estimate length in meters
HF.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HF.px),
ratio.HD = HD.px/TL.px, # ratio using nose-dorsal fin measure
ratio.HF = HF.px/TL.px, # ratio using nose- flipper measure
ratio.DF = HF.px/HD.px # ratio nose-flipper to nose DF
)
# add quality ratings:
# get q. ratings
q.ratings <- read.csv("Data/Processed_Data/morpho.output.QRating.csv", header = T)
q.ratings <- q.ratings %>% mutate(imageName = file_name)
morpho.output <- morpho.output %>%
mutate(ind = as.character(ind)) %>%
left_join(q.ratings %>% mutate(ind = as.character(ind)) %>%
select(imageName, ind, Q.focus, Q.straightness, Q.roll, Q.arch, Q.pitch, Q.meas, Q.dorsal, Q.flippers ),
by = c("imageName", "ind") )
morpho.output<- morpho.output[-which(is.na(morpho.output$Q.focus & morpho.output$notes == "balaena")),]
morpho.output <- morpho.output %>% filter(notes != "balaena")
photo.id <- read.csv("Data/Photo_ID_all.csv", header = T)
photo.id <- photo.id %>%
mutate(ind = str_extract(Keywords, "ind\\d+") %>% str_remove("ind"),
video.file = substr(RawFileName, 1, 32),
video.whale.ID = paste(video.file, ind, sep = "_"),
snapshot.ID= paste(RawFileName, ind, sep = "_"))
photo.id <-photo.id %>%
mutate(class = case_when(
str_detect(Keywords, "male") ~ "male",
str_detect(Keywords, "juanito") ~ "juanito",
TRUE ~ NA
))
# error check:
photo.id %>%
group_by(ID) %>%
summarize(unique_inds = n_distinct(Caption), .groups = "drop") %>%
filter(unique_inds > 1)  # nice!
morpho.output <-morpho.output %>%
mutate(snapshot.ID = paste(imageName, ind, sep = "_"))
morpho.output<- left_join(morpho.output, photo.id, by  ="snapshot.ID")
# remove rogue duplicate
morpho.output <- morpho.output %>%
distinct(snapshot.ID, .keep_all = TRUE)
#remove image with no quality rating
morpho.output <-morpho.output %>%
filter(!is.na(Q))
id.morph <- morpho.output%>%
filter(!is.na(ID))
id.mean <- id.morph %>%
group_by(ID) %>%
summarize(mean_TL = mean(TL.m, na.rm = T), cv_TL = (sd(TL.m, na.rm = T)/mean_TL)*100, sd_TL = sd(TL.m, na.rm = T),
mean_HD = mean(HD.m, na.rm = T), cv_HD = (sd(HD.m, na.rm = T)/mean_HD)*100, sd_HD = sd(HD.m, na.rm = T),
mean_HF = mean(HF.m, na.rm = T), cv_HF = (sd(HF.m, na.rm = T)/mean_HF)*100, sd_HF = sd(HD.m, na.rm = T),
mean_ratio.HD = mean(ratio.HD, na.rm = T), cv_ratio.HD = (sd(ratio.HD, na.rm = T)/mean_ratio.HD), sd_ratio.HD = sd(ratio.HD, na.rm = T),
mean_ratio.HF = mean(ratio.HF, na.rm = T), cv_ratio.HF = (sd(ratio.HF, na.rm = T)/mean_ratio.HF), sd_ratio.HF = sd(ratio.HF, na.rm = T),
n_photos = n(),
date = first(date),
mean_altitude= mean(altitude.c))
hd<-id.mean%>%
filter(n_photos>1 & !is.na(mean_HD))
hf<-id.mean%>%
filter(n_photos>1 & !is.na(mean_HF))
# 2. Explore Quality and identifyiablity-----
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
p1<- ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.c, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme_classic()+
theme(legend.position = "none") +
geom_hline(yintercept = 70, lty = "dashed")+
labs(x = "Q rating", y = "Altitude (m)")
p1
View(id.mean)
#save
write.csv(id.mean, "Data/Processed_Data/id_morpho_output_clean_processed.csv")
#save
write.csv(id.mean, "Data/Processed_Data/id_morpho_output_clean_processed.csv")
# 1. Load cleaned data ----
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
# Filter data ----
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HD, R_sd = sd_ratio.HD, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HF, R_sd = sd_ratio.HF, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
# Growth Curve Parameter Optimization
# Load necessary libraries and functions
source("Scripts/functions.R")
# 1. Load cleaned data ----
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
# Filter data ----
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HD, R_sd = sd_ratio.HD, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HF, R_sd = sd_ratio.HF, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
# Growth Curve Parameter Optimization
# Load necessary libraries and functions
source("Scripts/functions.R")
# 1. Load cleaned data ----
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
# Filter data ----
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HD, R_sd = sd_ratio.HD, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HF, R_sd = sd_ratio.HF, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
# Growth Curve Parameter Optimization
# Load necessary libraries and functions
source("Scripts/functions.R")
# 1. Load cleaned data ----
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
# Filter data ----
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HD, R_sd = sd_ratio.HD, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HF, R_sd = sd_ratio.HF, suckled_ever, suckling_ever)%>%
filter(!is.na(R_sd))
View(dat_HF)
View(clean_data)
# Filter data ----
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HD, R_sd = sd_ratio.HD, suckled_ever, suckling_ever, n_photos)%>%
filter(!is.na(R_sd))
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HF, R_sd = sd_ratio.HF, suckled_ever, suckling_ever, n_photos)%>%
filter(!is.na(R_sd))
View(dat_HF)
View(clean_data)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# get .mp4 file name
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# get correct altitude data from drone srt files
morpho.output <- getSrtAltitude(morpho.output)
# get and ratio and length estimates
morpho.output<- morpho.output %>% mutate(
altitude.c = altitudeASL(altitude.raw = droneAltitude), #add launch height to barometer altitude:
TL.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = TL.px), #estimate length in meters
HD.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HD.px), #estimate length in meters
HF.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HF.px),
ratio.HD = HD.px/TL.px, # ratio using nose-dorsal fin measure
ratio.HF = HF.px/TL.px, # ratio using nose- flipper measure
ratio.DF = HF.px/HD.px # ratio nose-flipper to nose DF
)
# get quality ratings
q.ratings <- read.csv("Data/Processed_Data/morpho.output.QRating.csv", header = T)
q.ratings <- q.ratings %>% mutate(imageName = file_name)
morpho.output <- morpho.output %>%
mutate(ind = as.character(ind)) %>%
left_join(q.ratings %>% mutate(ind = as.character(ind)) %>%
select(imageName, ind, Q.focus, Q.straightness, Q.roll, Q.arch, Q.pitch, Q.meas, Q.dorsal, Q.flippers ),
by = c("imageName", "ind") )
morpho.output<- morpho.output[-which(is.na(morpho.output$Q.focus & morpho.output$notes == "balaena")),]
suckles <- read.csv("Data/morpho.output.nursing.csv", header =T)
suckles <- suckles %>%
filter(!is.na(X))
morpho.output$suckled <- suckles$nursed
morpho.output$suckling <- suckles$nursing
morpho.output <- morpho.output %>% filter(notes != "balaena")
photo.id <- read.csv("Data/Photo_ID_all.csv", header = T)
photo.id <- photo.id %>%
mutate(ind = str_extract(Keywords, "ind\\d+") %>% str_remove("ind"),
video.file = substr(RawFileName, 1, 32),
video.whale.ID = paste(video.file, ind, sep = "_"),
snapshot.ID= paste(RawFileName, ind, sep = "_"))
photo.id <-photo.id %>%
mutate(class = case_when(
str_detect(Keywords, "male") ~ "male",
str_detect(Keywords, "juanito") ~ "juanito",
TRUE ~ NA
))
# error check:
photo.id %>%
group_by(ID) %>%
summarize(unique_inds = n_distinct(Caption), .groups = "drop") %>%
filter(unique_inds > 1)  # nice!
morpho.output <-morpho.output %>%
mutate(snapshot.ID = paste(imageName, ind, sep = "_"))
morpho.output<- left_join(morpho.output, photo.id, by  ="snapshot.ID")
# remove rogue duplicate
morpho.output <- morpho.output %>%
distinct(snapshot.ID, .keep_all = TRUE)
#remove image with no quality rating
morpho.output <-morpho.output %>%
filter(!is.na(Q))
cat("Number of stills images:", nrow(morpho.output), "\n")
id.morph <- morpho.output %>%
filter(!is.na(ID))
cat("Number of stills images with IDs:", nrow(id.morph), "\n")
cat("Number Identified whals:", length(levels(as.factor(id.morph$ID))), "\n")
#convert suckling to true or false:
id.morph <- id.morph %>%
mutate(suckled = ifelse(suckled !="yes", F, T),
suckling = ifelse(suckling !="yes", F, T))
summary(id.morph$suckled)
id.morph$suckled[which(is.na(id.morph$suckled))] <-F
id.morph$suckling[which(is.na(id.morph$suckling))] <-F
summary(id.morph$suckled)
summary(id.morph$suckling)
id.morph<- id.morph %>%
group_by(ID) %>%
mutate(suckled_ever = any(suckled, na.rm = TRUE),
suckling_ever = any(suckling, na.rm = TRUE)) %>%
ungroup()
summary(id.morph$suckled_ever)
summary(id.morph$suckling_ever)
View(id.morph)
write.csv(id.morph, "Data/Processed_Data/id_unpooled_clean_processed.csv")
id.mean <- id.morph %>%
group_by(ID) %>%
summarize(mean_TL = mean(TL.m, na.rm = T), cv_TL = (sd(TL.m, na.rm = T)/mean_TL)*100, sd_TL = sd(TL.m, na.rm = T),
mean_HD = mean(HD.m, na.rm = T), cv_HD = (sd(HD.m, na.rm = T)/mean_HD)*100, sd_HD = sd(HD.m, na.rm = T),
mean_HF = mean(HF.m, na.rm = T), cv_HF = (sd(HF.m, na.rm = T)/mean_HF)*100, sd_HF = sd(HD.m, na.rm = T),
mean_ratio.HD = mean(ratio.HD, na.rm = T), cv_ratio.HD = (sd(ratio.HD, na.rm = T)/mean_ratio.HD), sd_ratio.HD = sd(ratio.HD, na.rm = T),
mean_ratio.HF = mean(ratio.HF, na.rm = T), cv_ratio.HF = (sd(ratio.HF, na.rm = T)/mean_ratio.HF), sd_ratio.HF = sd(ratio.HF, na.rm = T),
n_photos = n(),
date = first(date),
mean_altitude= mean(altitude.c),
suckled_ever = first(suckled_ever),
suckling_ever = first(suckling_ever))
hist(id.mean$sd_TL)
hist(id.mean$sd_TL, breaks = 20)
hist(id.mean$sd_ratio.HD, breaks = 20)
hist(id.mean$sd_ratio.HF, breaks = 20)
plot(id.mean$TL, id.mean$sd_TL)
plot(id.mean$TL, id.mean$sd_TL)
plot(id.mean$mean_TL, id.mean$sd_TL)
plot(id.mean$mean_TL, id.mean$sd_ratio.HD)
plot(id.mean$mean_TL, id.mean$sd_ratio.HF)
# 1. Load cleaned data ----
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
# Filter data ----
dat_HD <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HD, R_sd = sd_ratio.HD, suckled_ever, suckling_ever, n_photos)%>%
filter(!is.na(R_sd))
dat_HF <- clean_data %>%
select(ID, Length = mean_TL, Length_SD = sd_TL,
R = mean_ratio.HF, R_sd = sd_ratio.HF, suckled_ever, suckling_ever, n_photos)%>%
filter(!is.na(R_sd))
