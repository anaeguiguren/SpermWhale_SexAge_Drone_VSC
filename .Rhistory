facet_wrap(~correction_type, ncol = 1)+
theme(legend.position = "None")+scale_fill_wa_d("rainier")
ggplot(dat_long, aes(x = error_p, fill = correction_type)) +
stat_halfeye(alpha = 0.5, adjust = 1) +
theme_classic() +
labs(
title = "Density plots of corrected altitudes",
x = "Error %",
y = "Density",
fill = "Correction Type"
)+
facet_wrap(~correction_type, ncol = 1)+
theme(legend.position = "None")+scale_fill_wa_d("rainier")
dat_long %>%
group_by(correction_type)%>%
summarise(mean_err = mean(error),
mean_err_p = mean(error_p),
quant_5 = quantile(error_p, probs = 0.05),
quant_95 = quantile(error_, probs = 0.95))
dat_long %>%
group_by(correction_type)%>%
summarise(mean_err = mean(error),
mean_err_p = mean(error_p),
quant_5 = quantile(error_p, probs = 0.05),
quant_95 = quantile(error_p, probs = 0.95))
dat_long %>%
group_by(correction_type)%>%
summarise(mean_err = mean(error),
mean_err_p = mean(error_p),
quant_5 = quantile(error_p, probs = 0.05),
quant_95 = quantile(error_p, probs = 0.95),
ic_range = quant_95-quant_5)
quantile(dat$altitude.err.p, probs = c(0.025, 0.975))
dat_long %>%
group_by(correction_type)%>%
summarise(mean_err = mean(error),
mean_err_p = mean(error_p),
quant_5 = quantile(error_p, probs = 0.025),
quant_95 = quantile(error_p, probs = 0.975),
ic_range = quant_95-quant_5)
ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-20,20))+
labs(y = "% error", x = "error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-20,20))+
labs(y = "Error %", x = "Error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-20,20))+
labs(y = "Error %", x = "Error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
library(wacolors)
setwd( "C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
p1 <-ggplot(d, aes(x = error.type, y = perc.error, fill = error.type))+
geom_boxplot()+
scale_y_continuous(limits=c(-20,20))+
labs(y = "Error %", x = "Error type")+
theme_classic()+
theme(legend.position = "null")+
geom_hline(yintercept = 0)+
geom_hline(yintercept = -5, linetype = "dashed", colour = "gray")+
geom_hline(yintercept = 5, linetype = "dashed", colour = "gray")+
scale_fill_wa_d("rainier")
ggsave("Figures/measuerement_error_corrected.png",
p1, width = 3, height = 3)
knitr::opts_chunk$set(echo = TRUE)
dat$error <- dat$bal.length-12.03
mean(dat$error)
sd(dat$error)
ggplot(dat, aes(x = factor(position), y = error))+
geom_boxplot()
setwd("C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
getwd()
#setwd("C:/Users/balae/Documents/SpermWhale_SexAge_Drone_VSC")
source("Scripts/00_DJI_Mini_Callibration_Data_Prep.R")
source("Scripts/00_DJI_Mini_Callibration_Data_Prep.R")
# Read raw data
dat <- read.csv("Data/id.morpho.output.clean.csv", T)
# Summarize by individual ID
dat_id <- dat %>%
group_by(ID) %>%
summarise(
mean.TL = mean(TL.m, na.rm = TRUE),
sd.TL = sd(TL.m, na.rm = TRUE),
mean.Ratio.HF = mean(ratio.HF, na.rm = TRUE),
sd.Ratio.HF = sd(ratio.HF, na.rm = TRUE),
mean.Ratio.HD = mean(ratio.HD, na.rm = TRUE),
sd.Ratio.HD = sd(ratio.HD, na.rm = TRUE),
is_male = any(notes == "male", na.rm = TRUE)  # Flag known males
)
head(dat)
str(dat)
View(dat)
# Load cleaned data
clean_data <- read.csv("Data/Processed_Data/id_morpho_output_clean_processed.csv")
# 1. Scatter plot of total length vs nose-to-body ratios
p1 <- ggplot(clean_data, aes(x = L, y = R.hf)) +
geom_point(aes(size = 1 / sd.R.hf), alpha = 0.6) +
#geom_smooth(method = "loess", se = TRUE) +
labs(x = "Total Length (m)",
y = "Head-to-Fluke Ratio",
size = "Measurement Precision") +
scale_size_continuous(name = "Precision\n(1/SD)") +
theme_bw() +
theme(legend.position = "right")
p1
# 1. Read raw data -----
morpho.output <-read.csv("Output_Data/morpho.output.batch2.csv", header = T)
# 1. Read raw data -----
morpho.output <-read.csv("Output_Data/morpho.output.batch2.csv", header = T)
# 1. Read raw data -----
morpho.output <-read.csv("Processed_Data/morpho.output.batch2.csv", header = T)
getwd()
# 1. Read raw data -----
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# 1. Read raw data -----
#raw read from morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
head(morpho.output)
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# ~~~~a. get correct altitude data from srt fiiles ----
morpho.output <- getSrtAltitude(morpho.output)
# Load required packages
source("Scripts/functions.R")
# ~~~~a. get correct altitude data from srt fiiles ----
morpho.output <- getSrtAltitude(morpho.output)
drone_srt_files <- read.csv("Data/Drone_Logs/Gal2023_Drone_Flight_Logs_srt.csv", header = T)
# Load required packages
source("Scripts/functions.R")
# ~~~~a. get correct altitude data from srt fiiles ----
morpho.output <- getSrtAltitude(morpho.output)
# ~~~~a. get correct altitude data from srt fiiles ----
morpho.output <- getSrtAltitude(morpho.output)
# 1. Read and clean data -----
#raw reads from Mrphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# ~~~~a. get correct altitude data from srt fiiles ----
morpho.output <- getSrtAltitude(morpho.output)
# Load required packages
source("Scripts/functions.R")
library(tidyverse)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# get .mp4 file name
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# get correct altitude data from drone srt files
morpho.output <- getSrtAltitude(morpho.output)
View(morpho.output)
# get and ration length estimates
morpho.output<- morpho.output %>% mutate(
altitude.c = altitudeASL(altitude.raw = droneAltitude), #add launch height to barometer altitude:
TL.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = TL.px), #estimate length in meters
HD.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HD.px), #estimate length in meters
HF.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HF.px),
ratio.HD = HD.px/TL.px, # ratio using nose-dorsal fin measure
ratio.HF = HF.px/TL.px, # ratio using nose- flipper measure
ratio.DF = HF.px/HD.px # ratio nose-flipper to nose DF
)
View(morpho.output)
q.ratings <- read.csv("Data/Processed_Data/morpho.output.QRating.csv", header = T)
# get q. ratings
q.ratings <- read.csv("Data/Processed_Data/morpho.output.QRating.csv", header = T)
q.ratings <- q.ratings %>% mutate(imageName = file_name)
head(q.ratings)
morpho.output <- morpho.output %>%
mutate(ind = as.character(ind)) %>%
left_join(q.ratings %>% mutate(ind = as.character(ind)) %>%
select(imageName, ind, Q.focus, Q.straightness, Q.roll, Q.arch, Q.pitch, Q.meas, Q.dorsal, Q.flippers ),
by = c("imageName", "ind") )
View(morpho.output)
rm(morpho.output)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# get .mp4 file name
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# get correct altitude data from drone srt files
morpho.output <- getSrtAltitude(morpho.output)
# get and ration length estimates
morpho.output<- morpho.output %>% mutate(
altitude.c = altitudeASL(altitude.raw = droneAltitude), #add launch height to barometer altitude:
TL.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = TL.px), #estimate length in meters
HD.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HD.px), #estimate length in meters
HF.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HF.px),
ratio.HD = HD.px/TL.px, # ratio using nose-dorsal fin measure
ratio.HF = HF.px/TL.px, # ratio using nose- flipper measure
ratio.DF = HF.px/HD.px # ratio nose-flipper to nose DF
)
View(morpho.output)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
View(morpho.output)
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
getwd()
# 1. Read and clean data -----
#raw reads from Morphometrix
morpho.output <-read.csv("Data/morpho.output.batch2.csv", header = T)
View(morpho.output)
# get .mp4 file name
morpho.output<-morpho.output%>% mutate(
video.file = substr(imageName, 1, 32)
)
# get within-video whale ID and date
morpho.output <- morpho.output %>% mutate(
video.whale.ID =paste(video.file, ind, sep = "_"),
date = substr(video.whale.ID, 18,25)
)
# get correct altitude data from drone srt files
morpho.output <- getSrtAltitude(morpho.output)
# get and ration length estimates
morpho.output<- morpho.output %>% mutate(
altitude.c = altitudeASL(altitude.raw = droneAltitude), #add launch height to barometer altitude:
TL.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = TL.px), #estimate length in meters
HD.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HD.px), #estimate length in meters
HF.m = measureWhales(image.width = image_width, altitude = altitudeASL(altitude.raw = droneAltitude),length.pixels = HF.px),
ratio.HD = HD.px/TL.px, # ratio using nose-dorsal fin measure
ratio.HF = HF.px/TL.px, # ratio using nose- flipper measure
ratio.DF = HF.px/HD.px # ratio nose-flipper to nose DF
)
# add quality ratings:
# get q. ratings
q.ratings <- read.csv("Data/Processed_Data/morpho.output.QRating.csv", header = T)
q.ratings <- q.ratings %>% mutate(imageName = file_name)
head(q.ratings)
morpho.output <- morpho.output %>%
mutate(ind = as.character(ind)) %>%
left_join(q.ratings %>% mutate(ind = as.character(ind)) %>%
select(imageName, ind, Q.focus, Q.straightness, Q.roll, Q.arch, Q.pitch, Q.meas, Q.dorsal, Q.flippers ),
by = c("imageName", "ind") )
morpho.output<- morpho.output[-which(is.na(morpho.output$Q.focus & morpho.output$notes == "balaena")),]
View(morpho.output)
morpho.output %>% filter(notes != "balaena")
morpho.output <- morpho.output %>% filter(notes != "balaena")
View(morpho.output)
photo.id <- read.csv("Data/Photo_ID_all.csv", header = T)
photo.id <- read.csv("Data/Photo_ID_all.csv", header = T)
photo.id <- read.csv("Data/Photo_ID_all.csv", header = T)
photo.id <- photo.id %>%
mutate(ind = str_extract(Keywords, "ind\\d+") %>% str_remove("ind"),
video.file = substr(RawFileName, 1, 32),
video.whale.ID = paste(video.file, ind, sep = "_"),
snapshot.ID= paste(RawFileName, ind, sep = "_"))
photo.id <-photo.id %>%
mutate(class = case_when(
str_detect(Keywords, "male") ~ "male",
str_detect(Keywords, "juanito") ~ "juanito",
TRUE ~ NA
))
# error check:
photo.id %>%
group_by(ID) %>%
summarize(unique_inds = n_distinct(Caption), .groups = "drop") %>%
filter(unique_inds > 1)  # nice!
morpho.output <-morpho.output %>%
mutate(snapshot.ID = paste(imageName, ind, sep = "_"))
morpho.output<- left_join(morpho.output, photo.id, by  ="snapshot.ID")
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
View(photo.id)
View(morpho.output)
duplicates <- morpho.output %>%
group_by(snapshot.ID) %>%
summarise(count = n()) %>%
filter(count > 1)
View(duplicates)
View(photo.id)
View(duplicates)
duplicates$snapshot.ID
length(unique(morpho.output$snapshot.ID))
#remove rogue duplicate
morpho.output <- morpho.output %>%
distinct(snapshot.ID, .keep_all = TRUE)
id.morph <- morpho.output%>%
filter(!is.na(ID))
id.mean <- id.morph %>%
group_by(ID) %>%
summarize(mean_TL = mean(TL.m, na.rm = T), cv_TL = (sd(TL.m, na.rm = T)/mean_TL)*100, sd_TL = sd(TL.m, na.rm = T),
mean_HD = mean(HD.m, na.rm = T), cv_HD = (sd(HD.m, na.rm = T)/mean_HD)*100, sd_HD = sd(HD.m, na.rm = T),
mean_HF = mean(HF.m, na.rm = T), cv_HF = (sd(HF.m, na.rm = T)/mean_HF)*100, sd_HF = sd(HD.m, na.rm = T),
mean_ratio.HD = mean(ratio.HD, na.rm = T), cv_ratio.HD = (sd(ratio.HD, na.rm = T)/mean_ratio.HD), sd_ratio.HD = sd(ratio.HD, na.rm = T),
mean_ratio.HF = mean(ratio.HF, na.rm = T), cv_ratio.HF = (sd(ratio.HF, na.rm = T)/mean_ratio.HF), sd_ratio.HF = sd(ratio.HF, na.rm = T),
n_photos = n(),
date = first(date),
mean_altitude= mean(altitude.c))
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
# 2. Explore Quality and identifyiablity-----
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
geom_hline(yintercept = 75)+
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
geom_hline(yintercept = 70)+
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
geom_hline(yintercept = 60)+
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme(legend.position = "none") +
geom_hline(yintercept = 60, lty = "dashed")+
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme_classic()+
theme(legend.position = "none") +
geom_hline(yintercept = 60, lty = "dashed")+
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
morpho.output %>%
filter(!is.na(Q))
#remove image with no quality rating
morpho.output <-morpho.output %>%
filter(!is.na(Q))
id.morph <- morpho.output%>%
filter(!is.na(ID))
id.mean <- id.morph %>%
group_by(ID) %>%
summarize(mean_TL = mean(TL.m, na.rm = T), cv_TL = (sd(TL.m, na.rm = T)/mean_TL)*100, sd_TL = sd(TL.m, na.rm = T),
mean_HD = mean(HD.m, na.rm = T), cv_HD = (sd(HD.m, na.rm = T)/mean_HD)*100, sd_HD = sd(HD.m, na.rm = T),
mean_HF = mean(HF.m, na.rm = T), cv_HF = (sd(HF.m, na.rm = T)/mean_HF)*100, sd_HF = sd(HD.m, na.rm = T),
mean_ratio.HD = mean(ratio.HD, na.rm = T), cv_ratio.HD = (sd(ratio.HD, na.rm = T)/mean_ratio.HD), sd_ratio.HD = sd(ratio.HD, na.rm = T),
mean_ratio.HF = mean(ratio.HF, na.rm = T), cv_ratio.HF = (sd(ratio.HF, na.rm = T)/mean_ratio.HF), sd_ratio.HF = sd(ratio.HF, na.rm = T),
n_photos = n(),
date = first(date),
mean_altitude= mean(altitude.c))
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme_classic()+
theme(legend.position = "none") +
geom_hline(yintercept = 60, lty = "dashed")+
stat_compare_means(method = "anova", label.y = 145) +  # ANOVA test
stat_compare_means(comparisons = list(c("1", "2"), c("2", "3"), c("3", "4"), c("4", "5"), c("1", "5")),
method = "t.test", label = "p.signif",
label.y = c(145, 150, 155, 160, 165))  # Adjust label positions
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.raw, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme_classic()+
theme(legend.position = "none") +
geom_hline(yintercept = 60, lty = "dashed")
ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.c, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme_classic()+
theme(legend.position = "none") +
geom_hline(yintercept = 60, lty = "dashed")+
labs(x = "Q rating", y = "Altitude (m)")
ggsave("Figures/Altitude_vs_Quality.png",
p1, width = 5, height = 5)
range(morpho.output$altitude.c)
p1<- ggplot(morpho.output, aes(x = as.factor(Q), y = altitude.c, fill = as.factor(Q))) +
geom_boxplot() +
geom_jitter(width = 0.12, alpha = 0.6) +
scale_fill_brewer(palette = "Greens") +
theme_classic()+
theme(legend.position = "none") +
geom_hline(yintercept = 70, lty = "dashed")+
labs(x = "Q rating", y = "Altitude (m)")
p1
getwd()
ggsave("Figures/Altitude_vs_Quality.png",
p1, width = 5, height = 5)
id.morph
summary(id.morph$Q)
summary(as.factor(id.morph$Q))
# Summarize by individual ID
dat_id <- dat %>%
group_by(ID) %>%
summarise(
mean.TL = mean(TL.m, na.rm = TRUE),
sd.TL = sd(TL.m, na.rm = TRUE),
mean.Ratio.HF = mean(ratio.HF, na.rm = TRUE),
sd.Ratio.HF = sd(ratio.HF, na.rm = TRUE),
mean.Ratio.HD = mean(ratio.HD, na.rm = TRUE),
sd.Ratio.HD = sd(ratio.HD, na.rm = TRUE),
is_male = any(notes == "male", na.rm = TRUE)  # Flag known males
)
ggplot(morpho.output, aes(x = altitude.raw, y = as.factor(Q), fill = as.factor(Q), alpha = 0.9))+
geom_density_ridges2()+
scale_fill_brewer(palette = "Greens")+
theme(legend.position = "none")
View(id.mean)
View(id.mean)
View(id.mean)
id.mean%>%
filter(n_photos>1)
id.mean%>%
filter(n_photos>1 & !is.na(mean_HD))
hd<-id.mean%>%
filter(n_photos>1 & !is.na(mean_HD))
View(hd)
hf<-id.mean%>%
filter(n_photos>1 & !is.na(mean_HD))
hf<-id.mean%>%
filter(n_photos>1 & !is.na(mean_HF))
hf$n_photos
hd$n_photos
